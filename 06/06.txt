06.txt

十六、文本分析
由自然语言所表达的文本信息->指导机器做出判断的语义
NLTK-自然语言工具包
1.分词
将复杂的文本你拆分成语义相对独立且简单的单元,如句子,词组或者单词
import nltk.tokenize as tk 
tk.sent_tokenize(文章)->句子列表
tk.word_tokenize(文章)->单词列表
分词器对象=tk.WordPunctTokenizer()
分词器对象.tokenize(句子)->单词列表
代码:tkn.py

2.词干提取
从单词中抽取与语义联系最为紧密,且变化较少的部分,有意丢弃那些与数,词性,时态,语态等有关的次要部分.
算法本身并不保证所提取的词干依然是合法的单词.
import nltk.stem.porter as pt 
波特词干提取器 = pt.PorterSemmer()          #宽松
import nltk.stem.lancaster as lc 
郎卡斯特词干提取器 = lc.LancasterStemmer()  #严格 
import nltk.stem.snowball as sb 
斯诺伯词干提取器 = sb.SnowballStemmer()     #中间
xxxx词干提取器.stem(单词)->词干
代码:stm.py


3.词形还原
对于名词:复数->单数
对于动词:分词->原型
import nltk.stem as ns 
词形还原器 = ns.WordNetLemmatizer()
词形还原器.lemmatize(单词,pos=词性)->单数/原型
代码:lmm.py

4.词袋(BOW,Bag of Words)模型
The brown dog is running.
The black dog is in the black room.
Running in the room is forbidden. 

import sklearn.feature_extraction.text as ft 
词袋特征抽取器=ft.CountVectorizer()
词袋特征抽取器.fit_transform(句子列表)->词袋矩阵
代码:bow.py


5.词频矩阵
真正表示单词和句子语义关联性的并非该单词在句子中出现的次数,而是他所占的比例,因此用词袋矩阵的归一化矩阵表示文本序列的特征更加有利,这样的特征矩阵为之词频矩阵
代码:tf.py

6.文档频率
                         包含词表中某个单词的样本数
词表中某个单词的文档频率----------------------------
                                 总样本数
文档频率越低的单词,对于区分样本差别的贡献越大.

7.TF-IDF,词频-逆文档频率
词频矩阵中的每个元素乘上相应单词文档频率的倒数
词频逆文档频率抽取器=ft.TfidfTransformer()
词频逆文档频率抽取器.fit_transform(词袋矩阵)->词频逆文档频率矩阵
代码:tfidf.py

8.文本分类
代码:doc.py

9.性别识别
代码:gndr.py

10.情感分析
代码:sent.py

十七.语音识别
1.音频
声音的本质就是震动,因此对声音的描述就是位移关于时间的函数.通过傅里叶变换,可以把这个位移关于时间函数映射为能量关于频率的函数,进而从声音的频谱中挖掘特征,用于机器学习.
代码:audio.py

2.识别
结合语音的特点,将每个单词的频谱作为输入,单词作为输出,建立一个分类器,识别出频谱和单词之间的联系,对位置输入的频谱,预测与之对应的输出,即完成语音识别.

频谱1->单词1
频谱2->单词2
...

3.梅尔频率倒谱系数(MFCC)
代码:mfcc.py








十五、文本分析
由自然语言所表达的文本信息->指导机器做出判断的语义
NLTK——自然语言工具包
1.分词——从文本中划分出语义单位
代码：tkn.py
2.词干提取——去除词中的次要成分，只保留与含义最相关的部分
词干只和词的含义相关，但其本身未必是合法的单词。
代码：stm.py
3.词型还原——将复数名词还原为单数，将分词变为动词原型
词型还原不仅和含义相关，且其本身亦是合法的单词。
代码：lmm.py
4.文本信息的数学模型
词袋->词频->词频逆文档频率(TF-IDF)
the brown dog is running
the black dog is in the black room
running in the room is forbidden
---------------------------------------
   the brown dog is running black in room forbidden
1   1       1        1    1      1           0      0    0             0
2   2       0        1    1      0           2      1    1             0
3   1       0        0    1      1           0      1    1             1
2/8x3
1/5x3/2
词袋：统计出文档(样本空间)词典中每个单词在每个样本中出现的次数。
词频：对词袋的归一化，即用每个词每个单词在每个样本中出现的次数除以该样本总词数。
文档频率：包含词典中某个单词的样本数除以总样本数。
逆文档频率：文档频率的倒数。
词频逆文档频率：词频 x 逆文档频率
词频越高，表示该词对样本语义的贡献越大，逆文档频率越高，即文档频率越低，表示该词对样本语义的区分作用越大，二者相乘体现了词典中每个单词对语义识别的价值高低。
代码：tfidf.py
5.文本分类
代码：doc.py
1 2 3 4 5 6
1 1 2 3 2 1
3 1 1 1 2 2
...
6.性别识别
代码：gndr.py
 ___________输入___________    输出
/                                         \     |
特征值1 特征值2 ... 特征值n   标签
xxx        xxx       ...  xxx         yyy
xxx        xxx       ...  xxx         yyy
...
({特征值1: xxx, 特征值2: xxx, ..., 特征值n: xxx}, yyy)
7.情感分析
代码：sent.py
                              hello good wonderful ...
cv000_29590.txt True  Ture  False                -> POSITIVE
                              False True  False
8.主题抽取
代码：topic.py
十六、语音识别
1.声音
声音的本质就是震动，对声音的描述就是对震动的描述，即位移关于时间的函数。
2.采样
在不同的时刻采集声音的位移数据。如果将这些采样数据保存在音频文件中就是波形文件，扩展名为".wav"。
3.回放
根据对声音的采样，在时间序列上，还原相应的位移，产生震动。
代码：audio.py
4.频谱
通过傅里叶变换，将声音信号从时间域映射到频率域，即按照频率将原始信号分解为特定频段的能量谱，通过对特殊频率的识别，建立声音和文本的对应关系。
位移(时间) -fft-> 能量(频率) -> [f1, f2, f3, ...] -> apple
5.梅尔频率倒谱系数(MFCC)
将原始音频信号(时间域)按照固定的间隔切分成若干片段，其中一个片段就是一个样本，再通过傅里叶变换，将每个样本映射到频率域，选取其中与声音内容联系最为密切的13个特征频率，记录其所对应的能量值，形成矩阵，即MFCC。
代码：mfcc.py


